//      /   _ _      JaCo
//  \  //\ / / \     - pretty printer for synchronous Java
//   \//  \\_\_/     
//         \         Matthias Zenger, 21/02/00

package jaco.sjava.component;

import jaco.framework.*;
import jaco.java.struct.*;
import jaco.java.context.*;
import jaco.java.component.*;
import jaco.sjava.struct.*;
import jaco.sjava.context.*;
import jaco.sjava.component.*;
import SJTree.*;
import Type.*;
import Constant.*;
import java.io.*;
import Definition.*;
import java.util.*;


public class SJPrettyPrinter extends PrettyPrinter {

    public SJPrettyPrinter() {
	super();
    }
	
    public SJPrettyPrinter(PrintWriter out) {
	super(out);
    }
		
    public SJPrettyPrinter(String suffix) {
	super(suffix);
    }

    public String getName() {
	return "SJPrettyPrinter";
    }
    
    public void outputProlog(Vector prolog, String filename)
    {
        println("/* generated by sjavac, (c) Matthias Zenger, David Cavin").
        println(" *   content: " + filename).
        println(" *   date   : " + new Date()).
        println(" */").println();

        if (prolog != null)
        {
            for (int i = 1; i < prolog.size(); i++)
            {
                System.out.print("Hi, here");
                printDecl((Tree)prolog.elementAt(i)).println();
            }   
            println();
        }
    }
    
    public PrettyPrinter printDecl(Tree tree) {
	switch (tree) {
	default:	
	    return super.printDecl(tree);
	}
    }

    public PrettyPrinter printStat(Tree tree) {
	switch ((SJTree)tree) {
	case SelectCase(Name index, Tree maxNumber, Tree guard, Tree synchStat, Tree[] stats):			   	
	    if (guard != null) {
		print("when (").printExpr(guard).println(")");
                align();
            }
	    if (synchStat == null)
                println("default;");
	    else
                printStat(synchStat).println();
            indent();
	    printStats(stats);
            undent();
	    return this;
	case SelectStat(SelectCase[] cases, boolean b):
	    if (b)
		print("selectnowait {\n");
	    else
		print("select {\n");
            indent();
	    for (int i = 0; i < cases.length - 1; i++) {
		align();
		printStat(cases[i]);
		undent();
                println();
                align();
		print("||");
                indent();
	    }
	    align();
	    printStat(cases[cases.length - 1]);
	    undent();
	    align();
	    print("}");
	    return this;
	case AcceptStat(Name name, MethodDef[] defs, Tree fromObj, Name forallVal, boolean fromDefined):
	    if (!fromDefined)
		print("accept " + name).print(";");
	    else
		print("accept " + name + " from " + fromObj);
	    return this;
           
	case WaitUntilStat(Tree expr):
	    print("waituntil ").printExpr(expr).print(";");
	    return this;
	default:
	    return super.printStat(tree);
	}
    }
	
    public PrettyPrinter printExpr(Tree tree, int prec) {
	switch (tree) {
	default:
	    return super.printExpr(tree, prec);
	}
    }
}
