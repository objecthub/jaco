============================================================

                EXTENSIBLE MODULES FOR JAVA
        
                         27/12/00
         Matthias Zenger, matthias.zenger@epfl.ch

============================================================


1 SPECIFICATION

1.1 Contexts

  context C extends C' requires M1, C1, ... {
      M2 = new M2;
      M3 = new C1.new M3
      M4() = new M4
  }
  
  A context configures a subsystem. It provides
  implementations for a set of module types. Module
  types are either defined implicitly by module
  definitions or explicitly by module interfaces.
  A context is the only place where modules or
  other contexts may be instantiated. A qualified
  'new' expression is used to create modules or
  contexts. The qualifier has to be a context:
  
      context.new Module
  
  The 'requires' clause of a context definition has
  to name all modules required by the contexts and
  modules created within the scope of a context
  definition. A context in a 'requires' clause is
  expanded to all modules defined in this context.
  Module bindings from C' are inherited to C (but
  might be overridden in C). Modules of the 'requires'
  clause that are not defined in C and that are not
  inherited to C from C' are inherited from the
  context, in which the current context (this) is
  embedded. Contexts are structurally defined.


1.2 Modules

  module M extends M'
           implements I1, I2, ...
           requires M1, C1, ... {
    ...
    { // module initialization
    
    }
  }
  
  A module is a program unit embedded in a specific
  context. This context is required to provide
  other modules M1, ... and all modules of context
  C1,... The 'requires' clause of M' is inherited to
  M. A module contains fields, methods, initializers
  and nested classes or interfaces. Except for classes
  and interfaces, none of them can be declared static.
  All fields and methods that are not private are
  exported from the module. It is possible to extend
  modules in the same way, classes are extended.
  Modules are defined nominally.


1.3 Module interfaces
  
  module interface M extends M1, M2, ... {
      ...
  }
  
  A module interface specifies a generic interface
  for modules. Only modules can implement this interface.


1.4 Classes
  
  class T extends T'
          implements I1, I2, ...
          requires M1, C1, ... {
      
  }
  
  It is possible to access modules within non-static
  members of classes. Therefore all modules used
  within the body of a class have to be named in
  the 'requires' clause of the corresponding
  top-level class or module; i.e. inner classes
  cannot have a 'requires' clause. A class with
  a 'requires' clause can only be instantiated in
  a context which provides implementations for the
  required module types. The 'requires' clause is
  inherited to subclasses.


1.5 Bootstrapping
  
  context C {
      Main = new Main;
      ...
  }
  
  Contexts without a 'requires' clause that provide at
  most one module with short name Main are executable,
  if this module has an accessible method with signature:
  
      void main(String[] args);
      
  At runtime, this executable context is instantiated
  and the main method of the Main module is invoked with
  the command-line arguments.



2 IMPLEMENTATION

2.1 Contexts

  context C extends C' requires M1, C1, ... {
      M2 = new M2;
      M3 = new C1.new M3
      M4() = new M4
  }

  --->

  class C extends C' implements M1.$Factory$, ... {
  	  Object $encl$; // only iff C' == Object
      M1 M1; // only iff not defined in C or C'
      ...
      M2 M2; // only iff not defined in C'
      M3 M3; // only iff not defined in C'
      C(Object $encl$) {
          super($encl$);
          // or this.$encl$ = $encl$; iff C' == Object
      }
      M1 M1() {
          if (M1 == null)
              M1 = ((M1.$Factory$)$encl$).M1();
          return M1;
      }
      ...
      M2 M2() {
          if (M2 == null) {
              M2 = new M2();
              M2.$init$(this);
          }
          return M2;
      }
      M3 M3() {
          if (M3 == null) {
              M3 = new M3();
              M3.$init$(new C1(this));
          }
          return M3;
      }
  }


2.2 Modules

  module M extends M'
           implements I1, I2, ...
           requires M1, C1, ... {
    ...
    { // module initialization
  
    }
  }

  --->
  
  class M extends M'
          implements I1, I2, ... {
      interface $Factory$ {
          M M();
      }
      final Object $encl$;
      protected M1 M1;
      ...
      void $init$(Object $encl$) {
          this.$encl$ = $encl$;
          // or super.$init$($encl$) iff M' != Object
          M1 = ((M1.$Factory$)$encl$).M1();
          ...
      }
      ...
  }


2.3 Module interfaces

  module interface M extends M1, M2, ... {
      ...
  }

  --->
  
  interface M extends M1, M2, ... {
      interface $Factory$ {
          M M();
      }
      void $init$(Object $encl$);
      ...
  }
  

2.4 Classes

  class T extends T'
          implements I1, I2, ...
          requires M1, C1, ... {
      T(...) {
          ...
      }
      ...
  }

  --->
  
  class T extends T'
          implements I1, I2, ... {
      final Object $encl$; // if T' requires nothing
      protected final M1 M1; // if not defined in T'
      ...
      T(..., Object $encl$) {
          this.$encl$ = $encl$;
          // or super(..., $encl$); iff T' requires something
          M1 = ((M1.$Factory$)$encl$).M1();
          ...
      }
      ...
  }


2.5 Bootstrapping

  context C {
      Main = new Main;
      ...
  }

  --->
  
  class C implements Main.$Factory$ {
      Object $encl$;
      C(Object $encl$) {
          this.$encl$ = $encl$;
      }
      Main Main;
      Main Main() {
          if (Main == null) {
              Main = new Main();
              Main.$init(this);
          }
          return Main;
      }
      ...
      public static void main(String[] args) {
          Main().main(args);
      }
  }
