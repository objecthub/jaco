//                 _
//   _  _____ _ __(_)___     Keris API
//  | |/ / _ \ '__| / __|    (c) 2001 Matthias Zenger
//  |   <  __/ |  | \__ \
//  |_|\_\___|_|  |_|___/    Parsing of command line arguments
//                           
//  [OPTIONS.keris (6262) 6-Jul-01 12:03 -> 6-Jul-01 16:09]

package keris.app;

import java.util.*;
import java.io.*;
import java.text.*;


public module OPTIONS {

    /** predefined settings
     */
    protected ResourceBundle settingsRsrc;

    /** the settings prefix
     */
    protected String settingPrefix = "setting.";

    /** general file settings
     */
    public String[] suffixes = {};
    public Vector files = new Vector();
    public Vector skipped = new Vector();
    
    /** general options
     */
    protected boolean recursive = false;
    protected boolean wildcards = false;
    public String encoding = "8859_1";
    public int tabsize = 8;


    /** this exception is thrown when encoutering an error in option parsing
     */
    public class OptionParsingException extends Exception {
        OptionParsingException() {
            super("OptionParsingException");
        }
        OptionParsingException(String message) {
            super(message);
        }
    }

    /** command-line parsing
     */
    public void parse(String[] args) throws OptionParsingException {
        if (args == null)
            return;
        int i = 0;
        while (i < args.length)
            if (args[i].startsWith("-")) {
                if (((i + 1) < args.length) &&
                    parseOption(args[i], args[i + 1]))
                    i += 2;
                else
                    parseSwitch(args[i++]);
            } else if (parseToken(args[i]))
                i++;
            else if (wildcards)
                addExpandedSource(args[i++]);
            else
                addSource(null, args[i++]);
    }
    
    /** parse simple switch
     */
    protected void parseSwitch(String option) throws OptionParsingException {
        if (option.equals("-w"))
            wildcards = true;
        else if (option.equals("-r"))
            recursive = true;
        else
            throw new OptionParsingException("unknown switch: " + option);
    }

    /** parse option with one argument; return true, if option is valid
     */
    protected boolean parseOption(String option, String arg)
                                             throws OptionParsingException {
        if (option.equals("-encoding"))
            encoding = arg;
        else if (option.equals("-settings"))
            configure(arg);
        else
            return false;
        return true;
    }
    
    /** parse token
     */
    protected boolean parseToken(String token) throws OptionParsingException {
        return false;
    }
    
    /** expand wildcards and add the matching sourcefiles
     */
    protected void addExpandedSource(String arg) {
        if (hasWildcards(arg)) {
            File f = new File(arg);
            String path = f.getParent();
            String name = f.getName();
            if (path == null)
                path = (arg.indexOf(File.separator) == 0) ? "" : ".";
            f = new File(path);
            String[]    content;
            if ((f != null) && ((content = f.list()) != null)) {
                for (int j = 0; j < content.length; j++)
                    if (matches(content[j], 0, name, 0))
                        addSource(f, content[j]);
                return;
            }
        }
        addSource(null, arg);
    }

    /** add file to the sourcefile pool
     */
    protected void addSource(File dir, String arg) {
        if (recursive) {
            File f = (dir == null) ? new File(arg) : new File(dir, arg);
            String[] content;
            if (f.exists() && ((content = f.list()) != null)) {
                for (int j = 0; j < content.length; j++)
                    addSource(f, content[j]);
                return;
            }
        }
        for (int j = 0; j < suffixes.length; j++)
            if (arg.endsWith(suffixes[j])) {
                if (dir != null)
                    files.addElement(new File(dir, arg).getAbsolutePath());
                else
                    files.addElement(arg);
                return;
            }
        skipped.addElement(arg);
    }
    
    /** are there any '*' or '?' characters in string s?
     */
    protected boolean hasWildcards(String s) {
        return (s.length() > 0) && 
               ((s.indexOf('*') >= 0) || (s.indexOf('?') >= 0));
    }
    
    /** match string s[soffset..] against pattern p[poffset..]?
     */
    protected boolean matches(String s, int soffset, String p, int poffset) {
        if (poffset >= p.length())
            return (soffset >= s.length());
        else if (p.charAt(poffset) == '*')
            return matches(s, soffset, p, poffset + 1) ||
                   ((soffset < s.length()) && 
                   matches(s, soffset + 1, p, poffset));
        else
            return (soffset < s.length()) && 
                   ((p.charAt(poffset) == '?') || 
                   Character.toUpperCase(s.charAt(soffset)) == 
                        Character.toUpperCase(p.charAt(poffset))) && 
                   matches(s, soffset + 1, p, poffset + 1);
    }

    /** configure settings with resource file
     */
    protected void configure(String rsrc) throws OptionParsingException {
        try {
            settingsRsrc = ResourceBundle.getBundle(rsrc);
            suffixes = getRsrcSetting("suffixes", " ,\t\n\r");
            tabsize = getRsrcSetting("tabsize", 8);
            encoding = getRsrcSetting("encoding");
            try {
                parse(getRsrcSetting("switches", " \t\n\r"));
            } catch (OptionParsingException e) {}
            try {
                parse(getRsrcSetting("files", " ,\t\n\r"));
            } catch (OptionParsingException e) {}
        } catch (MissingResourceException e) {
            throw new OptionParsingException("resource " +
                rsrc + " is missing.");
        }
    }
    
    /** get resource setting
     */
    public String getRsrcSetting(String key) throws OptionParsingException {
        if (settingsRsrc == null)
            throw new OptionParsingException("illegal resource specifier");
        try {
            String  str = settingsRsrc.getString(settingPrefix + key);
            if (str == null)
                return null;
            else if (str.startsWith("$"))
                return System.getProperty(str.substring(1));
            else if (str.equals("."))
                return null;
            else
                return str;
        } catch (MissingResourceException e) {
            return null;
        }
    }

    /** get resource setting as integer
     */
    public int getRsrcSetting(String key, int defaultNum)
                                            throws OptionParsingException {
        String  str = getRsrcSetting(key);
        if (str == null)
            return defaultNum;
        else
            try {
                return Integer.parseInt(str);
            } catch (NumberFormatException e) {
                return defaultNum;
            }
    }
    
    /** get resource setting list
     */
    public String[] getRsrcSetting(String key, String delim)
                                            throws OptionParsingException {
        String  str = getRsrcSetting(key);
        if (str == null)
            return null;
        StringTokenizer tok = new StringTokenizer(str, delim);
        String[]    list = new String[tok.countTokens()];
            for (int i = 0; i < list.length; i++)
                list[i] = tok.nextToken();
        return list;
    }
}
